;; -*-lisp-*-
;;======================================================================


(in-package :stumpwm)
(load-module "wifi")
(load-module "battery-portable")


;;======================================================================


(set-prefix-key (kbd "C-3"))


;;======================================================================
;; User Input

;;------------------------------------------------------------
;; Meta & Shell

(define-key *root-map* (kbd "M-x") "colon")
(define-key *root-map* (kbd "C-t") "exec terminal")
(define-key *root-map* (kbd "c") "exec gnome-terminal")
(define-key *root-map* (kbd "C-c") "exec gnome-terminal")

;;------------------------------------------------------------
;; Mouse

(setf *mouse-focus-policy* :click) ;; :click, :ignore, :sloppy

;;------------------------------------------------------------
;; Focus

(define-key *root-map* (kbd "C-Right") "move-focus right")
(define-key *root-map* (kbd "C-Left") "move-focus left")
(define-key *root-map* (kbd "C-Up") "move-focus up")
(define-key *root-map* (kbd "C-Down") "move-focus down")

;;------------------------------------------------------------
;; Groups

(define-key *root-map* (kbd "n") "gnext")
(define-key *root-map* (kbd "p") "gprev")
(define-key *root-map* (kbd "C-n") "gnext")
(define-key *root-map* (kbd "C-p") "gprev")

;;------------------------------------------------------------
;; Frames

(define-key *root-map* (kbd "3") "hsplit")
(define-key *root-map* (kbd "C-3") "hsplit")

(define-key *root-map* (kbd "2") "vsplit")
(define-key *root-map* (kbd "C-2") "vsplit")

(define-key *root-map* (kbd "1") "only")
(define-key *root-map* (kbd "C-1") "only")

;;------------------------------------------------------------
;; Ham-Hands & Sanity Changes

(undefine-key *root-map* (kbd ";"))

;;======================================================================
;; Desktop Aethetics

(stumpwm:run-shell-command
 "setxkbmap -layout gb -option ctrl:nocaps")

;;------------------------------------------------------------
;; set desktop background

(stumpwm:run-shell-command
 "/usr/bin/feh --no-fehbg --bg-scale '/home/baggers/Pictures/spacexLanding.jpg'")

;;------------------------------------------------------------
;; Modeline

(setf stumpwm:*screen-mode-line-format*
      (list "%w | %I | %B | " '(:eval (stumpwm:run-shell-command "date" t))))

(defcommand my-show-mode-line () ()
            (stumpwm:toggle-mode-line (stumpwm:current-screen)
                                      (stumpwm:current-head)))

(define-key *root-map* (kbd "C-m") "my-show-mode-line")

;;======================================================================
;; Windows

;;------------------------------------------------------------
;; General

(defun window-from-menu ()
  (select-window-from-menu (sort-windows (current-group))
                           *window-format*))

;;------------------------------------------------------------
;; Switch with history

(defvar *win-history* nil)

(defun add-window-to-history (win)
  (setf *win-history* (remove-duplicates (cons win *win-history*)
                                         :test #'eq :from-end t)))

(defun select-window-from-menu (windows fmt)
  (define-key stumpwm::*menu-map* (kbd "C-k") 'kill-window)
  (let ((result (second (select-from-menu
                         (current-screen)
                         (mapcar (lambda (w)
                                   (list (format-expand *window-formatters* fmt w) w))
                                 windows)
                         nil
                         (or (position (first *win-history*) windows) 0)))))
    (undefine-key *menu-map* (kbd "C-k"))
    result))

(defcommand select-window-with-history () ()
            "Pick a window from the menu.
   Tries to have emacs 'Switch to buffer' like behaviour"
            (let* ((previous-win (current-window))
                   (win (window-from-menu)))
              (when win
                (add-window-to-history previous-win)
                (if (window-visible-p win)
                    (focus-window win)
                    (pull-window win)))))

(defcommand remove-split-with-history () ()
            "Remove current-split and take the window that was there and add it to
   the window history"
            (let ((win (current-window)))
              (when win
                (add-window-to-history win)))
            (remove-split))

(define-key *root-map* (kbd "C-b") "select-window-with-history")
(define-key *root-map* (kbd "b") "select-window-with-history")
(define-key *root-map* (kbd "0") "remove-split-with-history")
(define-key *root-map* (kbd "C-0") "remove-split-with-history")

;;On hide frame add window to history

;;------------------------------------------------------------
;; Inverting Window Color

(defvar *inverted-windows* nil)

(defun current-window-xwin-id ()
  (xlib:window-id (window-xwin (current-window))))

(defcommand invert-window () ()
            "Invert the current window using compton"
            (let ((id (current-window-xwin-id))
                  (compton-runningp (run-shell-command "pidof compton" t)))
              (setf *inverted-windows* (if (member id *inverted-windows*)
                                           (remove id *inverted-windows*)
                                           (cons id *inverted-windows*)))
              (when compton-runningp
                (run-shell-command "pkill compton" t))
              (when *inverted-windows*
                (let ((ids-pattern (format nil "~{client=~s~^ || ~}" *inverted-windows*)))
                  (run-shell-command
                   (format nil "compton --backend glx --invert-color-include '~a'"
                           ids-pattern))))))

(define-key *root-map* (kbd "C-i") "invert-window")

;;======================================================================
;; Taking Screenshots

(defcommand screenshot () ()
            (run-shell-command
             (concatenate 'string "xwd -root -out ~/Desktop/"
                          (multiple-value-bind (s m h dy mn yr) (get-decoded-time)
                            (format nil "screengrab-~s-~s-~s-~s-~s-~s.xwd"
                                    yr mn dy h m s)))))




;;======================================================================
;; Desktop Applications

(define-key *root-map* (kbd "XF86HomePage") "exec iceweasel")

;;======================================================================
;; Meta

;; Load swank.
(load "~/quicklisp/dists/quicklisp/software/slime-v2.24/swank-loader.lisp")

(swank-loader:init)

(defcommand swank () ()
            (swank:create-server :port 5005 :style swank:*communication-style* :dont-close t)
            (echo-string (current-screen) "Starting swank. M-x slime-connect using port 5005."))




;;======================================================================
;; Things that didnt work out

;;fails
;;(define-key *root-map* (kbd "C-y") "exec kupfer") didnt work very well, kupfer keeps focusing the first group
