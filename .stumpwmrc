;; -*-lisp-*-
(in-package :stumpwm)

(load-module "wifi")
(load-module "battery-portable")

;;(set-prefix-key (kbd "F20")) win key
(set-prefix-key (kbd "C-3"))

(define-key *root-map* (kbd "C-3") "hsplit")
(define-key *root-map* (kbd "C-2") "vsplit")
(define-key *root-map* (kbd "C-1") "only")
(define-key *root-map* (kbd "C-0") "remove-split")
(define-key *root-map* (kbd "3") "hsplit")
(define-key *root-map* (kbd "2") "vsplit")
(define-key *root-map* (kbd "1") "only")
(define-key *root-map* (kbd "0") "remove-split")

(define-key *root-map* (kbd "C-Right") "move-focus right")
(define-key *root-map* (kbd "C-Left") "move-focus left")
(define-key *root-map* (kbd "C-Up") "move-focus up")
(define-key *root-map* (kbd "C-Down") "move-focus down")
(define-key *root-map* (kbd "C-b") "pull-window-select")
(define-key *root-map* (kbd "b") "pull-window-select")
(define-key *root-map* (kbd "M-x") "colon")
;;(define-key *root-map* (kbd "C-i") "exec xcalib -invert -alter")
(define-key *root-map* (kbd "C-i") "invert-window")
(define-key *root-map* (kbd "C-t") "exec terminal")
(define-key *root-map* (kbd "c") "exec gnome-terminal")
(define-key *root-map* (kbd "XF86HomePage") "exec iceweasel")

(define-key *root-map* (kbd "n") "gnext")
(define-key *root-map* (kbd "p") "gprev")
(define-key *root-map* (kbd "C-n") "gnext")
(define-key *root-map* (kbd "C-p") "gprev")

(define-key *root-map* (kbd "C-m") "my-show-mode-line")

(undefine-key *root-map* (kbd ";"))

(setf *mouse-focus-policy* :click) ;; :click, :ignore, :sloppy

(setf stumpwm:*screen-mode-line-format*
      (list "%w | %I | %B | " '(:eval (stumpwm:run-shell-command "date" t))))

(defcommand my-show-mode-line () ()
	    (stumpwm:toggle-mode-line (stumpwm:current-screen)
				      (stumpwm:current-head)))

(defvar win-history nil)

(defcommand pull-window-select () ()
  (let ((win (select-window-from-menu (sort-windows (current-group)) *window-format*)))
    (when win
      (push win win-history)
      (if (window-visible-p win)
	  (focus-window win)
	  (pull-window win)))))

(defun select-window-from-menu (windows fmt)
  (define-key stumpwm::*menu-map* (kbd "C-k") 'kill-window)
  (let ((result (second (select-from-menu
                         (current-screen)
                         (mapcar (lambda (w)
                                   (list (format-expand *window-formatters* fmt w) w))
                                 windows)
                         nil
                         (or (position (second win-history) windows) 0)))))
    (undefine-key *menu-map* (kbd "C-k"))
    result))

(defvar *inverted-windows* nil)

(defun current-window-xwin-id ()
  (xlib:window-id (window-xwin (current-window))))

(defcommand invert-window () ()
  (let ((id (current-window-xwin-id))
	(compton-runningp (run-shell-command "pidof compton" t)))
    (setf *inverted-windows* (if (member id *inverted-windows*)
				 (remove id *inverted-windows*)
				 (cons id *inverted-windows*)))
    (when compton-runningp
      (run-shell-command "pkill compton" t))
    (when *inverted-windows*
      (let ((ids-pattern (format nil "~{client=~s~^ || ~}" *inverted-windows*)))
	(run-shell-command
	 (format nil "compton --backend glx --invert-color-include '~a'"
		 ids-pattern))))))

(defcommand screenshot () ()
  (run-shell-command
   (concatenate 'string "xwd -root -out ~/Desktop/"
		(multiple-value-bind (s m h dy mn yr) (get-decoded-time)
		  (format nil "screengrab-~s-~s-~s-~s-~s-~s.xwd"
			  yr mn dy h m s)))))

;; Load swank.
(load "~/quicklisp/dists/quicklisp/software/slime-v2.17/swank-loader.lisp")

(swank-loader:init)

(defcommand swank () ()
  (swank:create-server :port 5005 :style swank:*communication-style* :dont-close t)
  (echo-string (current-screen) "Starting swank. M-x slime-connect using port 5005."))

;;fails
;;(define-key *root-map* (kbd "C-y") "exec kupfer") didnt work very well, kupfer keeps focusing the first group

;; set desktop background
(stumpwm:run-shell-command "feh --bg-scale /home/baggers/Pictures/GardenED2.png")
